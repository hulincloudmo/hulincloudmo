(window.webpackJsonp=window.webpackJsonp||[]).push([[57],{370:function(t,a,s){"use strict";s.r(a);var n=s(0),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"vue双向绑定时的原理？"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#vue双向绑定时的原理？"}},[t._v("#")]),t._v(" vue双向绑定时的原理？"),s("Badge",{attrs:{text:"★★★",type:"warn"}})],1),t._v(" "),s("p",[t._v("VUE实现双向数据绑定的原理就是利用了 Object.defineProperty() 这个方法重新定义了对象获取属性值(get)和设置属性值(set)的操作来实现的。")]),t._v(" "),s("h2",{attrs:{id:"computed和watch"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#computed和watch"}},[t._v("#")]),t._v(" computed和watch")]),t._v(" "),s("h3",{attrs:{id:"computed"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#computed"}},[t._v("#")]),t._v(" computed")]),t._v(" "),s("ol",[s("li",[t._v("computed的原理")])]),t._v(" "),s("p",[t._v("computed会在程序初始化时计算一次值，完成后内部将"),s("code",[t._v("dirty")]),t._v("属性设为"),s("code",[t._v("false")]),t._v("，同时将计算值缓存下来，而computed会拥有一个自己的watcher，当依赖值发生变化被内部watcher监听到时，会将"),s("code",[t._v("dirty")]),t._v("重新置为"),s("code",[t._v("true")]),t._v("，这样在下次访问到computed函数时，就会重新计算")]),t._v(" "),s("h3",{attrs:{id:"watch"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#watch"}},[t._v("#")]),t._v(" watch")]),t._v(" "),s("ol",[s("li",[t._v("什么时候开始监听Watch的？")])]),t._v(" "),s("p",[t._v("在mounted之后")]),t._v(" "),s("ol",{attrs:{start:"2"}},[s("li",[t._v("watch中的deep深度监听")])]),t._v(" "),s("p",[t._v("深度监听会对监听对象进行递归的访问，为他们添加watcher，这样深层次的修改也会触发watch的回调函数，对于复杂对象来说，深度监听是比较消耗性能的，所以深度监听要合理使用")]),t._v(" "),s("h2",{attrs:{id:"组件data必须为什么要是个函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#组件data必须为什么要是个函数"}},[t._v("#")]),t._v(" 组件data必须为什么要是个函数")]),t._v(" "),s("p",[t._v("组件实际上在编译后会变成一个类，如果不是函数的话，所有的组件data就会一样了，而函数里返回的变量会受到闭包的影响而保留")]),t._v(" "),s("p",[t._v("一个组件被复用多次的话，也就会创建多个实例。本质上，这些实例用的都是同一个构造函数。如果data是对象的话，对象属于引用类型，会影响到所有的实例。所以为了保证组件不同的实例之间data不冲突，data必须是一个函数。")]),t._v(" "),s("p",[t._v("假设我们有一个这样的组件使用")]),t._v(" "),s("div",{staticClass:"language-vue extra-class"},[s("pre",{pre:!0,attrs:{class:"language-vue"}},[s("code",[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("Component1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("Component1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("Component1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("Component1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),s("p",[t._v("从原理出发，他将会编译成什么样的"),s("code",[t._v("render")]),t._v("函数呢？")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("render")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// _c即是createElement，1是节点类型")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("with")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("_c")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"div"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("_c")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Component1'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("_c")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Component1'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("每一个"),s("code",[t._v("Component1")]),t._v("都会被_c调用，这时候如果你的data是一个属性时，他会拿着Component中的data去创建组件。用代码表示可为")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("_c")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" data1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Component1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("data\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" data2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Component1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("data\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("那么当你改变其中一个组件的data时，另一个组件的data也会被改变，造成了数据污染")]),t._v(" "),s("p",[t._v("函数形式则就相当于")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("_c")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" data1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Component1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("data")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" data2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Component1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("data")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("这时候，你每创建一次组件实例就会执行一次data()函数，每个组件都会拥有自己的一份全新的data，就不会互相污染数据了")]),t._v(" "),s("h2",{attrs:{id:"vue的action和mutation有何区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#vue的action和mutation有何区别"}},[t._v("#")]),t._v(" Vue的action和mutation有何区别")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("action中处理异步，mutation不可以")])]),t._v(" "),s("li",[s("p",[t._v("mutation中做原子操作")])]),t._v(" "),s("li",[s("p",[t._v("action可以整合多个mutation")])])]),t._v(" "),s("h2",{attrs:{id:"响应式原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#响应式原理"}},[t._v("#")]),t._v(" 响应式原理")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("监听data")])]),t._v(" "),s("li",[s("p",[t._v("组件渲染、更新过程")])])]),t._v(" "),s("h2",{attrs:{id:"vue中组件更新顺序"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#vue中组件更新顺序"}},[t._v("#")]),t._v(" vue中组件更新顺序")]),t._v(" "),s("p",[t._v("创建顺序 => 先父后子")]),t._v(" "),s("p",[t._v("渲染顺序 => 先子后父")]),t._v(" "),s("p",[t._v("更新顺序 => 先父后子")]),t._v(" "),s("p",[t._v("更新完成顺序 => 先子后父")]),t._v(" "),s("p",[t._v("销毁顺序 => 先父后子")]),t._v(" "),s("p",[t._v("销毁完成顺序 => 先子后父")])])}),[],!1,null,null,null);a.default=e.exports}}]);