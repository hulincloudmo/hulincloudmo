(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{331:function(e,t,s){"use strict";s.r(t);var r=s(0),n=Object(r.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"如何创建一个像我一样的blog"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何创建一个像我一样的blog","aria-hidden":"true"}},[e._v("#")]),e._v(" 如何创建一个像我一样的blog")]),e._v(" "),s("div",{staticClass:"tip custom-block"},[s("p",[e._v("本文将介绍四大步骤使用vuepress\n· 使用vuepress搭建您的个人博客并部署在github的gitpage上\n· 使用github的自定义域名功能将gitpage换到自己的域名上\n· 解决每次提交github时自定义域名会自动重置的问题\n· 使用TravisCI自动化部署更新博客\n@flowstart\nprocess=>operation: Operation\ne=>end: End")]),e._v(" "),s("p",[e._v("process->e\n@flowend")])]),e._v(" "),s("h2",{attrs:{id:"获取vuepress源码github地址"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#获取vuepress源码github地址","aria-hidden":"true"}},[e._v("#")]),e._v(" 获取vuepress"),s("a",{attrs:{href:"https://github.com/vuejs/vuepress",target:"_blank",rel:"noopener noreferrer"}},[e._v("源码github地址"),s("OutboundLink")],1)]),e._v(" "),s("pre",[s("code",[e._v("在项目中添加依赖\nyarn add vuepress -D\n")])]),e._v(" "),s("p",[e._v("等待处理完成后，运行vuepress dev docs命令即可看到你的blog，目录结构如下")]),e._v(" "),s("pre",[s("code",[e._v(".\n├── docs\n│   ├── .vuepress (可选的)\n│   │   ├── components (可选的)\n│   │   ├── theme (可选的)\n│   │   │   └── Layout.vue\n│   │   ├── public (可选的)\n│   │   ├── styles (可选的)\n│   │   │   ├── index.styl\n│   │   │   └── palette.styl\n│   │   ├── templates (可选的, 谨慎配置)\n│   │   │   ├── dev.html\n│   │   │   └── ssr.html\n│   │   ├── config.js (可选的)\n│   │   └── enhanceApp.js (可选的)\n│   │ \n│   ├── README.md\n│   ├── guide\n│   │   └── README.md\n│   └── config.md\n│ \n└── package.json\n")])]),e._v(" "),s("h2",{attrs:{id:"配置vuepress的侧边栏"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#配置vuepress的侧边栏","aria-hidden":"true"}},[e._v("#")]),e._v(" 配置vuepress的侧边栏")]),e._v(" "),s("p",[e._v("在/docs/.vuepress/config.js下可以配置vuepress的各项配置，具体可参照官网进行配置，我这里提供出官网中比较难理解的侧边栏配置，尝试了很多配置方法，最后还是手动配置最为方便，示例代码如下")]),e._v(" "),s("pre",[s("code",[e._v("sidebar: {\n     \"/guide/\": [\n      {\n                title: \"微信小程序相关\",\n                collapsable: false,\n                children: [\n                  'miniprogram/scroll-view',\n                  'miniprogram/loading',\n                  'miniprogram/paging'\n                ]\n              },\n     ]\n")])]),e._v(" "),s("p",[e._v("每个路由是一个数组，且不要忘了左右斜杠，如果你的md文件不在guide目录的根目录下，那么你需要在children中配置以guide为根的路径，md后缀可不写，在每个路由文件夹下可以建一个readme.md文件，这将会成为这个路由的首页！")]),e._v(" "),s("h2",{attrs:{id:"vuepress中的静态文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#vuepress中的静态文件","aria-hidden":"true"}},[e._v("#")]),e._v(" vuepress中的静态文件")]),e._v(" "),s("p",[e._v("在vuepress生成过程中，会将所有在public目录下的文件编译到最外层，所以在使用静态文件时我们首先要把静态文件放在public目录下，然后就可以直接使用如下格式\n/<文件名>使用即可，如果博客不是部署在你的github主页上，则要加上/<仓库名.github.io>/<文件名>")]),e._v(" "),s("h2",{attrs:{id:"完成这几步，可以部署啦"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#完成这几步，可以部署啦","aria-hidden":"true"}},[e._v("#")]),e._v(" 完成这几步，可以部署啦")]),e._v(" "),s("p",[e._v("完成了上面的步骤后，我们就可以将代码上传到建好的github仓库，再配置githubpage页面即可，如果你有自己的域名，在配置自定义域名即可。")]),e._v(" "),s("h2",{attrs:{id:"配置自定义域名"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#配置自定义域名","aria-hidden":"true"}},[e._v("#")]),e._v(" 配置自定义域名")]),e._v(" "),s("p",[e._v("配置自定义域名实际上就是配置一个网站重定向。最简单的方式就是在网站的云解析中，将网站解析到github页面上，\n以腾讯云为例，记录类型选择CNAME，记录值填入你的博客地址即可！")]),e._v(" "),s("h2",{attrs:{id:"解决每次提交github时自定义域名会自动重置的问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#解决每次提交github时自定义域名会自动重置的问题","aria-hidden":"true"}},[e._v("#")]),e._v(" 解决每次提交github时自定义域名会自动重置的问题")]),e._v(" "),s("p",[e._v("我们知道github识别是否需要自定义域名是看仓库里有没有CNAME文件，如果有的话将会使用其中的域名作为自定义域名，但是我们每次配置只能配置在代码文件中，而不是在生成文件中，所以我们需要在/docs/.vuepress/public目录下复制一个CNAME文件，这样每次提交的时候就不会被重置了")]),e._v(" "),s("h2",{attrs:{id:"使用travisci自动化部署更新博客"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用travisci自动化部署更新博客","aria-hidden":"true"}},[e._v("#")]),e._v(" 使用TravisCI自动化部署更新博客")]),e._v(" "),s("p",[e._v("在我们完成了部署后，我们发现每次都要重新编译后都需要自己上传对应的生成文件dist文件夹，那么我们为了省事，可以使用CI工具来完成我们的部署工作")]),e._v(" "),s("h3",{attrs:{id:"_1-配置自动部署脚本"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-配置自动部署脚本","aria-hidden":"true"}},[e._v("#")]),e._v(" 1.配置自动部署脚本")]),e._v(" "),s("pre",[s("code",[e._v("部署过程：\n1.编写自动化脚本，这里每个人的都不同，我展示一下我的配置，可供参照\n```shell script\n#!/usr/bin/env sh\n​\n# abort on errors\nset -e\n​\n# build\nnpm run docs:build\n​\n# navigate into the build output directory\ncd docs/.vuepress/dist\n​\n# if you are deploying to a custom domain\n# echo 'www.example.com' > CNAME\n​\ngit init\ngit add -A\ngit commit -m 'deploy'\n​\n# if you are deploying to https://<USERNAME>.github.io\n# git push -f git@github.com:<USERNAME>/<USERNAME>.github.io.git master（你将要部署到的分支，如果不是master分支，这里就修改为需要的分支,如果是github主页只能部署到master分支)\n​\n# if you are deploying to https://<USERNAME>.github.io/<REPO>\n git push -f https://${access_token}@github.com/<USERNAME>/<USERNAME>.github.io.git master\n​\ncd -\n\n```\n在脚本中我们看到需要配置access_token，这个信息需要在github上配置，并且给这个access_token推送等权限，这样travis才能自动的推送编译好的代码到github容器中,配置access_token的过程可自行百度\n")])]),e._v(" "),s("h3",{attrs:{id:"_2-配置travisci"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-配置travisci","aria-hidden":"true"}},[e._v("#")]),e._v(" 2.配置travisCI")]),e._v(" "),s("p",[e._v("有了配置文件，我们还要告诉Travis我们部署需要做什么事情，我们在根目录建立一个.travis.yml文件，写入如下内容")]),e._v(" "),s("pre",[s("code",[e._v("language: node_js # node环境，不可省略\nnode_js:\n  - lts/*\nscript:\n  - npm run docs:build # 执行命令\ndeploy:\n  provider: pages\n  skip-cleanup: true\n  local_dir: docs/.vuepress/dist # 部署的文件夹文件\n  github-token: $GITHUB_TOKEN # travis服务上的token变量\n  target-branch: master # 集成发布到master分支上，如果你的不是就改成对应的分支\n  keep-history: true\n  on:\n    branch: dev   # 代码文件所在的分支\n")])]),e._v(" "),s("h3",{attrs:{id:"_3-开启travisci的监控功能"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-开启travisci的监控功能","aria-hidden":"true"}},[e._v("#")]),e._v(" 3.开启travisCI的监控功能")]),e._v(" "),s("p",[e._v("在我们每次push代码到仓库中后，将会触发webhook请求到CI服务器，CI服务器就会知道他需要开始部署了，我们首先要在github配置好向Travis的webhook请求，然后在Travis开启对应仓库的监控即可，这样在我们提交代码之后，Travis就会自己编译代码并推送到github上，网站也就随之更新了。")])])}),[],!1,null,null,null);t.default=n.exports}}]);