(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{351:function(t,v,_){"use strict";_.r(v);var s=_(0),n=Object(s.a)({},(function(){var t=this,v=t.$createElement,_=t._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("p",[t._v("转载林间有风\n")]),t._v(" "),_("h2",{attrs:{id:"提问的那点事"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#提问的那点事","aria-hidden":"true"}},[t._v("#")]),t._v(" 提问的那点事")]),t._v(" "),_("p",[t._v("“提问”这一行为相信读者们都不陌生，大到生活，小到写代码，我们总会在前进的道路上遇到各种障碍。在面对障碍的时候，我们会有许多种应对方式，其中一种就是“提问”，也是最常用的一种，甚至是被滥用了的一种。为什么这么说呢？注意这里的其中一种这四个字，这里很直接的点明了这种方式不是万能的，再有就是“提问”本身是有前提和要求的，而很多人并没有意识到这些。很多人习惯性在遇到问题的时候就不假思索的提问，这也就是为什么有些人虽然提问，但是却始终得不到自己想要的答案、解决不了问题。其实说白了就是提问的方式不对，至于不对在哪，接下来作者分享几个本人亲身经历的真实例子，让读者们从另一个角度去体验这一过程。“提问”这一行为相信读者们都不陌生，大到生活，小到写代码，我们总会在前进的道路上遇到各种障碍。在面对障碍的时候，我们会有许多种应对方式，其中一种就是“提问”，也是最常用的一种，甚至是被滥用了的一种。为什么这么说呢？注意这里的其中一种这四个字，这里很直接的点明了这种方式不是万能的，再有就是“提问”本身是有前提和要求的，而很多人并没有意识到这些。很多人习惯性在遇到问题的时候就不假思索的提问，这也就是为什么有些人虽然提问，但是却始终得不到自己想要的答案、解决不了问题。其实说白了就是提问的方式不对，至于不对在哪，接下来作者分享几个本人亲身经历的真实例子，让读者们从另一个角度去体验这一过程。")]),t._v(" "),_("ul",[_("li",[_("strong",[t._v("不要轻易提问使用搜索引擎能解决的问题")])])]),t._v(" "),_("p",[t._v("在林间有风的官方QQ群，经常会有小伙伴提问，有时候我会复制他的问题，原原本本的放到搜索引擎中回车，然后把搜索结果的页面截图发到群里回复他，这时候会有三种情况：")]),t._v(" "),_("ol",[_("li",[t._v("没人说话")]),t._v(" "),_("li",[t._v("谢谢")]),t._v(" "),_("li",[t._v("不好意思，我去看看")])]),t._v(" "),_("p",[t._v("这里面我可能更期望的是第3种情况，因为下一次遇到问题的时候有很大概率会回想起这次可能不是那么好的经历，会让他暂时放弃习惯性的提问而先使用搜索引擎。有些人可能觉得我这样做有点不近人情或者装X，这里我要放出一张著名的“鸟哥语录”：")]),t._v(" "),_("div",{staticClass:"warning custom-block"},[_("p",[t._v("群聊对于解决问题真的是效率很低的一种方式。")])]),t._v(" "),_("p",[t._v("都说程序员是面向谷歌/百度编程，这句话我觉得一半是玩笑一半却也是道出了事实，就个人学习经历而言，绝大数问题也确实是通过搜索引擎解决的。当然搜索引擎也有不灵的时候，这时候就需要其他手段了，手段里面就包含了我们的讨论主题——提问。看到这里，如果读者觉得作者就是想告诉你遇事先百度，不行再提问那就太年轻了，虽然你最后确实是要这么做的。但是这里我想让读者们在掌握方法之余，从更深的层次去看待这个事情。请你思考一下，或者试验一下，你先通过搜索引擎之后再提问和上来就直接提问，你提问的内容、方式以及得到的反馈会有什么不同，答案是会有很大的不同。除非你本身语言表达能力有问题或者说话实在很招人讨厌，不然绝大多数情况下你在尝试利用搜索引擎后再提问会收获一个答案或者解决思路。而另一种方式的下场则多数情况下是没有人鸟你或者像我一样给你个截图。看到这里似乎感觉充满了玄学，其实不然！问题之所以是问题，就是因为我们不懂，不知所措，无从下手，我们一开始掌握到的，都是一些很零碎或者很模糊的信息，这些已知信息在你通过搜索引擎一番折腾之后，虽然没有解决，但是往往会令信息更加准确或者说接近问题真相，这个时候再提问，你就能更好地描述问题（一个懵逼的人去描述一个自己都不知道是什么的问题肯定不会有满意的结果），别人也能更好的帮你定位到问题。")]),t._v(" "),_("p",[t._v("很多人习惯性在解决一个问题后就不会再去关注这个问题，就像一个没有感情的杀手。大佬写代码就不会遇到问题了吗？答案是否定的。大佬之所以看起来像免疫一切问题一样是因为当问题出现的时候，大佬总能高效的定位问题并解决问题。这里读者可能会说，因为他是大佬，我不是呀。这里我想说的是这个看法是错误的。诚然，我们要定位和解决问题是需要一定的技术功底支撑，但是这只是一部分，另一部分则是经验使然。无论是解决程序上的问题还是其他问题，我们都会有一些通用的解决流程作参考，比如先xxx，然后再xxx，但是当你有一定的行业经验之后，你是可以跳过某些环节直接达到xxx的目的，这就是经验的作用。而经验怎么来的呢？就是通过不断总结和回顾每一次解决问题的经历。")]),t._v(" "),_("p",[t._v("回到我们的主题本身，作者观察发现，有些小伙伴一步一坑，一坑一提问，但是仔细观察会发现，这个问题和上一个问题其实解决的思路是一样的，都是可以用同样的手段定位问题，但是小伙伴浑然不知，这就是典型的没有总结和回顾，这种学习方式是很低效且容易打击自信心的。无论是解决问题也好，学习也好，思路、过程远比结果重要，问题的症状千变万化，但是原因终归那几样，一昧的追求“实现功能即可”只会让自己在舒适区中逐渐被淘汰，人生并没有太多“躺赢”的机会。")]),t._v(" "),_("p",[_("strong",[t._v("无论哪个行业，技术到了一定水准之后，必然会需要利用知识输出来提高自身、突破瓶颈，所以，大佬其实是很乐意回答问题的，只要你的提问是经过思考的。")])])])}),[],!1,null,null,null);v.default=n.exports}}]);