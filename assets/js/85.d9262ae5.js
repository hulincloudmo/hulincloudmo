(window.webpackJsonp=window.webpackJsonp||[]).push([[85],{396:function(e,t,a){"use strict";a.r(t);var r=a(0),n=Object(r.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("p",[e._v("vue3.0终于beta啦，香香的hooks编程终于到vue啦，让我们看看有啥新特性吧！\n")]),e._v(" "),a("h2",{attrs:{id:"全新的响应式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#全新的响应式"}},[e._v("#")]),e._v(" 全新的响应式")]),e._v(" "),a("p",[e._v("在vue3.0中"),a("code",[e._v("data中声明的数据将不会再具有响应式")]),e._v("，要声明响应式数据，需要在"),a("code",[e._v("setup()")]),e._v("函数中使用"),a("code",[e._v("ref")]),e._v("或"),a("code",[e._v("reactive")]),e._v("来声明，这两个函数本身响应式没有区别，只是"),a("code",[e._v("reactive")]),e._v("只能用来声明一个响应式对象，而ref没有限制。")]),e._v(" "),a("h2",{attrs:{id:"全新的异步组件使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#全新的异步组件使用"}},[e._v("#")]),e._v(" 全新的异步组件使用")]),e._v(" "),a("p",[e._v("我们知道，异步组件是由三种状态组成（loader，loading，error），在vue2.x中，我们需要自己书写异步组件的切换工厂函数，而在3.0中，我们只需要使用内置API"),a("code",[e._v("defineAsyncComponent")]),e._v("即可动态的切换组件")]),e._v(" "),a("div",{staticClass:"language-vue extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vue"}},[a("code",[e._v('export default {\nconst asyncComponent = defineAsyncComponent({\n  loader: () => new Promise( res => { \n       // 完成逻辑\n       res(import("./xxx.vue"))\n } ),\n  loadingComponent: import("./loading.vue")\n  errorComponent: import("./error.vue")\n})\n  setup() {\n\n}\n }\n')])])]),a("h2",{attrs:{id:"新的路由组件hooks"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#新的路由组件hooks"}},[e._v("#")]),e._v(" 新的路由组件hooks")]),e._v(" "),a("h2",{attrs:{id:"新的生命周期函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#新的生命周期函数"}},[e._v("#")]),e._v(" 新的生命周期函数")]),e._v(" "),a("p",[e._v("在vue3.0中废弃了created和beforeCreated，转变为setup函数，原有的生命周期函数全部加上了on前缀")])])}),[],!1,null,null,null);t.default=n.exports}}]);