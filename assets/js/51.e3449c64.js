(window.webpackJsonp=window.webpackJsonp||[]).push([[51],{364:function(t,a,s){"use strict";s.r(a);var r=s(0),v=Object(r.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[t._v("设计模式是前辈们总结出来的宝贵经验，对于初学者学起来可能有点痛苦，但是在不断的积累中，你会发现用好了设计模式将会有效的减少你的工作量！还是那句话，不要为了设计模式而学设计模式！\n")]),t._v(" "),s("h2",{attrs:{id:"s-单一职责原则"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#s-单一职责原则"}},[t._v("#")]),t._v(" S - 单一职责原则")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("一个程序只做好一件事")])]),t._v(" "),s("li",[s("p",[t._v("如果功能过于复杂就拆分开，每个部分保持独立")])])]),t._v(" "),s("h2",{attrs:{id:"o-开放封闭原则"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#o-开放封闭原则"}},[t._v("#")]),t._v(" O - 开放封闭原则")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("对拓展开放，对修改封闭")])]),t._v(" "),s("li",[s("p",[t._v("增加需求时，拓展新代码，而非修改已有代码")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("软件设计的终极目标")])])])]),t._v(" "),s("h2",{attrs:{id:"l-里氏替换原则"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#l-里氏替换原则"}},[t._v("#")]),t._v(" L-里氏替换原则")]),t._v(" "),s("ul",[s("li",[t._v("子类能覆盖父类")]),t._v(" "),s("li",[t._v("父类能出现的地方子类就能出现")])]),t._v(" "),s("h2",{attrs:{id:"i-接口独立原则"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#i-接口独立原则"}},[t._v("#")]),t._v(" I - 接口独立原则")]),t._v(" "),s("ul",[s("li",[t._v('保持接口的单一独立，避免出现   "胖接口”(一个函数包干完所有事情)')])]),t._v(" "),s("h2",{attrs:{id:"d-依赖倒置原则"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#d-依赖倒置原则"}},[t._v("#")]),t._v(" D - 依赖倒置原则")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("面相接口编程，依赖于抽象而不依赖于具体")])]),t._v(" "),s("li",[s("p",[t._v("使用方不关注具体类的实现")])])])])}),[],!1,null,null,null);a.default=v.exports}}]);